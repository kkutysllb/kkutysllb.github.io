<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一花一菩提，一云一世界</title>
  
  <subtitle>佛系ICT人士技术博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kkutysllb.cn/"/>
  <updated>2019-04-15T07:32:44.010Z</updated>
  <id>https://kkutysllb.cn/</id>
  
  <author>
    <name>kkutysllb</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2019-03-18-Linux系统的内存管理</title>
    <link href="https://kkutysllb.cn/2019/04/15/2019-03-18-Linux%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>https://kkutysllb.cn/2019/04/15/2019-03-18-Linux系统的内存管理/</id>
    <published>2019-04-15T07:21:59.000Z</published>
    <updated>2019-04-15T07:32:44.010Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux系统的内存管理"><a href="#Linux系统的内存管理" class="headerlink" title="Linux系统的内存管理"></a>Linux系统的内存管理</h1><p>内存管理一向是所有操作系统书籍不惜笔墨重点讨论的内容，无论市面上或是网上都充斥着大量涉及内存管理的教材和资料。因此，我们这里所要写的Linux内存管理采取避重就轻的策略，从理论层面就不去班门弄斧，贻笑大方了。</p><p>遵循“理论来源于实践”的“教条”，我们先不必一下子就钻入内核里去看系统内存到底是如何管理，那样往往会让你陷入似懂非懂的窘境（我当年就犯了这个错误！）。所以最好的方式是先从外部（用户编程范畴）来观察进程如何使用内存，等到大家对内存的使用有了较直观的认识后，再深入到内核中去学习内存如何被管理等理论知识。<a id="more"></a></p><hr><p>每个程序在操作系统中都对应一个进程（例如：QQ，微信等），所有进程都必须占用一定数量的内存，它或是用来存放从磁盘载入的程序代码，或是存放取自用户输入的数据等等。不过进程对这些内存的管理方式因内存用途不一而不尽相同，有些内存是事先静态分配和统一回收的，而有些却是按需要动态分配和回收的。</p><p>对任何一个普通进程来讲，它都会涉及到5种不同的数据段。稍有编程知识的朋友都能想到这几个数据段中包含有“程序代码段”、“程序数据段”、“程序堆栈段”等。不错，这几种数据段都在其中，但除了以上几种数据段之外，进程还另外包含两种数据段。下面我们来简单归纳一下进程对应的内存空间中所包含的5种不同的数据区。</p><p><strong>代码段：</strong>代码段是用来存放可执行文件的操作指令，也就是说它是可执行程序在内存中的镜像。代码段需要防止在运行时被非法修改，所以只准许读取操作，而不允许写入（修改）操作——它是不可写的。</p><p><strong>数据段：</strong>数据段用来存放可执行文件中已初始化全局变量，换句话说就是存放程序静态分配的变量和全局变量。</p><p><strong>BSS段：</strong>BSS段包含了程序中未初始化的全局变量，在内存中 bss段全部置零。</p><p><strong>堆（heap）：</strong>堆是用于存放进程运行中被动态分配的内存段，每一个程序当开始执行，就会在内存中划出一片空间作为程序运行时代码和数据存放地方。它的大小并不固定，可动态扩张或缩减。当进程调用malloc等函数分配内存时，新分配的内存就被动态添加到堆上（堆被扩张）；当利用free等函数释放内存时，被释放的内存从堆中被剔除（堆被缩减）。</p><p><strong>栈：</strong>栈是用户存放程序临时创建的局部变量，也就是说我们函数括弧“{}”中定义的变量（但不包括static声明的变量，static意味着在数据段中存放变量）。除此以外，在函数被调用时，其参数也会被压入发起调用的进程栈中，并且待到调用结束后，函数的返回值也会被存放回栈中。由于栈的先进先出特点，所以栈特别方便用来保存/恢复调用现场。从这个意义上讲，我们可以把堆栈看成一个寄存、交换临时数据的内存区。</p><p>机器语言指令中出现的内存地址，都是逻辑地址，需要转换成线性地址，再经过MMU(CPU中的内存管理单元)转换成物理地址才能够被访问到。我们写个最简单的hello world程序，用gccs编译，再反编译后会看到以下指令：</p><p>···</p><p>mov    0x8747ab0, %eax</p><p>···</p><p>这里的内存地址0x8747ab0 就是一个逻辑地址，必须加上隐含的DS 数据段的基地址，才能构成线性地址。也就是说 0x8747ab0 是当前任务的DS数据段内的偏移量offset。</p><p>在x86保护模式下，段的信息（段基线性地址、长度、权限等）即<strong>段描述符</strong>占8个字节，段信息无法直接存放在段寄存器中（段寄存器只有2字节）。Intel的设计是段描述符集中存放在GDT或LDT中，而段寄存器存放的是段描述符在GDT或LDT内的索引值(index)。</p><h2 id="Linux系统逻辑地址-线性地址"><a href="#Linux系统逻辑地址-线性地址" class="headerlink" title="Linux系统逻辑地址=线性地址"></a>Linux系统逻辑地址=线性地址</h2><p>为什么这么说呢？因为Linux所有的段（用户代码段、用户数据段、内核代码段、内核数据段）的线性地址都是从 0x00000000 开始，长度4G，这样，线性地址=逻辑地址+ 0x00000000，也就是说逻辑地址等于线性地址了。</p><p>这种情况下Linux只用到了GDT，不论是用户任务还是内核任务，都没有用到LDT。GDT的第12和13项段描述符是 <strong>KERNEL_CS 和</strong>KERNEL_DS，第14和15项段描述符是 <strong>USER_CS 和</strong>USER_DS。内核任务使用<strong>KERNEL_CS 和</strong>KERNEL_DS，所有的用户任务共用<strong>USER_CS 和</strong>USER_DS，也就是说不需要给每个任务再单独分配段描述符。内核段描述符和用户段描述符虽然起始线性地址和长度都一样，但DPL(描述符特权级)是不一样的。<strong>KERNEL_CS 和</strong>KERNEL_DS 的DPL值为0（最高特权），<strong>USER_CS 和</strong>USER_DS的DPL值为3。</p><p>用gdb调试程序的时候，用info reg 显示当前寄存器的值：</p><p>···</p><p>cs             0x73     115<br>ss             0x7b     123<br>ds             0x7b     123<br>es             0x7b     123</p><p>···</p><p>可以看到ds值为0x7b, 转换成二进制为 00000000 01111011，TI字段值为0,表示使用GDT，GDT索引值为 01111，即十进制15，对应的就是GDT内的__USER_DATA 用户数据段描述符。</p><p>从上面可以看到，Linux在x86的分段机制上运行，却通过一个巧妙的方式绕开了分段。</p><p>Linux主要以分页的方式实现内存管理。如下图所示：</p><p><img src="https://i.loli.net/2019/04/15/5cb4323465760.jpg" alt></p><p>前面说了Linux中逻辑地址等于线性地址，那么线性地址怎么对应到物理地址呢？这个大家都知道，那就是通过分页机制，具体的说，就是通过页表查找来对应物理地址。</p><p>准确的说分页是CPU提供的一种机制，Linux只是根据这种机制的规则，利用它实现了内存管理。</p><p>在保护模式下，控制寄存器CR0的最高位PG位控制着分页管理机制是否生效，如果PG=1，分页机制生效，需通过页表查找才能把线性地址转换物理地址。如果PG=0，则分页机制无效，线性地址就直接做为物理地址。</p><p>分页的基本原理是把内存划分成大小固定的若干单元，每个单元称为一页（page），每页包含4k字节的地址空间（为简化分析，我们不考虑扩展分页的情况）。这样每一页的起始地址都是4k字节对齐的。为了能转换成物理地址，我们需要给CPU提供<strong>当前任务的</strong>线性地址转物理地址的查找表，即页表(page table)。注意，<strong>为了实现每个任务的平坦的虚拟内存，每个任务都有自己的页目录表和页表</strong>。</p><p>为了节约页表占用的内存空间，x86将线性地址通过页目录表和页表两级查找转换成物理地址。32位的线性地址被分成3个部分：<strong>最高10位 Directory 页目录表偏移量，中间10位 Table是页表偏移量，最低12位Offset是物理页内的字节偏移量。</strong></p><p>页目录表的大小为4k（刚好是一个页的大小），包含1024项，每个项4字节（32位），项目里存储的内容就是<strong>页表的物理地址</strong>。如果页目录表中的页表尚未分配，则物理地址填0。页表的大小也是4k，同样包含1024项，每个项4字节，内容为最终物理页的物理内存起始地址。</p><p><strong>每个活动的任务，必须要先分配给它一个页目录表，并把页目录表的物理地址存入cr3寄存器。页表可以提前分配好，也可以在用到的时候再分配</strong>。</p><p>还是以 <code>mov 0x8747ab0, %eax</code> 中的地址为例分析一下线性地址转物理地址的过程。</p><p>前面说到Linux中逻辑地址等于线性地址，那么我们要转换的线性地址就是 <code>0x8747ab0</code>。转换的过程是由CPU自动完成的，Linux所要做的就是准备好转换所需的页目录表和页表（假设已经准备好，给页目录表和页表分配物理内存的过程很复杂，这里不做展开讨论，喜欢内核优化的可自行研究）。</p><p>线性地址 0x8747ab0 转换成二进制后是 1000 0111 0100 0111 1010 1011 0000 0000，最高10位1000 0111 01的十进制是541，CPU查看页目录表第541项，里面存放的是页表的物理地址。线性地址中间10位00 0111 1010 的十进制是122，页表的第122项存储的是最终物理页的物理起始地址。物理页基地址加上线性地址中最低12位的偏移量，CPU就找到了线性地址最终对应的物理内存单元。</p><p>我们知道Linux中用户进程线性地址能寻址的范围是0 － 3G，那么是不是需要提前先把这3G虚拟内存的页表都建立好呢？一般情况下，32位机器的物理内存是小于3G的，加上同时有很多进程都在运行，根本无法给每个进程提前建立3G的线性地址页表。Linux利用CPU的一个缺页机制解决了这个问题。进程创建后我们可以给页目录表的表项值都填0，CPU在查找页表时，如果表项的内容为0,则会引发一个缺页异常，进程暂停执行，Linux内核这时候可以通过一系列复杂的算法给分配一个物理页，并把物理页的地址填入表项中，进程再恢复执行。当然进程在这个过程中是被蒙蔽的，它自己的感觉还是正常访问到了物理内存。</p><p><img src="https://i.loli.net/2019/04/15/5cb432bc7e467.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux系统的内存管理&quot;&gt;&lt;a href=&quot;#Linux系统的内存管理&quot; class=&quot;headerlink&quot; title=&quot;Linux系统的内存管理&quot;&gt;&lt;/a&gt;Linux系统的内存管理&lt;/h1&gt;&lt;p&gt;内存管理一向是所有操作系统书籍不惜笔墨重点讨论的内容，无论市面上或是网上都充斥着大量涉及内存管理的教材和资料。因此，我们这里所要写的Linux内存管理采取避重就轻的策略，从理论层面就不去班门弄斧，贻笑大方了。&lt;/p&gt;
&lt;p&gt;遵循“理论来源于实践”的“教条”，我们先不必一下子就钻入内核里去看系统内存到底是如何管理，那样往往会让你陷入似懂非懂的窘境（我当年就犯了这个错误！）。所以最好的方式是先从外部（用户编程范畴）来观察进程如何使用内存，等到大家对内存的使用有了较直观的认识后，再深入到内核中去学习内存如何被管理等理论知识。
    
    </summary>
    
      <category term="Linux" scheme="https://kkutysllb.cn/categories/Linux/"/>
    
    
      <category term="基础概念" scheme="https://kkutysllb.cn/tags/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>2019-03-02-Linux系统基础介绍</title>
    <link href="https://kkutysllb.cn/2019/04/15/2019-03-02-Linux%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/"/>
    <id>https://kkutysllb.cn/2019/04/15/2019-03-02-Linux系统基础介绍/</id>
    <published>2019-04-15T06:53:05.000Z</published>
    <updated>2019-04-15T07:19:46.820Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux系统基础介绍"><a href="#Linux系统基础介绍" class="headerlink" title="Linux系统基础介绍"></a><strong><em>Linux系统基础介绍</em></strong></h1><p>本文作为Linux操作系统开篇文章，主要介绍一些操作系统的基础概念和原理，然后简要介绍Linux的发展历史，以及市面上常见的Linux系统版本。<a id="more"></a></p><hr><h2 id="操作系统基本概念和原理"><a href="#操作系统基本概念和原理" class="headerlink" title="操作系统基本概念和原理"></a><strong>操作系统基本概念和原理</strong></h2><p>操作系统可以说是目前所有现代人都了解的一个名词，大家平时的日常工作和生活都离不开操作系统。目前，世界上主要流行的操作系统有三类：Linux、Windows和Mac OS。其中，后两个操作系统是大家熟悉的，大家的日常工作和生活大部分都会跟这两种操作系统打交道，对于Linux操作系统可能普通只是处在听说过的阶段，很少有人去详细了解和使用。</p><p>那么如果有人问你什么是操作系统？虽然大家平时都在用，但是估计很多人都会一脸懵逼。其实，操作系统就是处在计算机硬件和人之间的一个重要的中间部件，它存在意义有2个：一是通过在其上部署应用软件，满足人们操作计算机硬件的需求。二是将上层应用软件与底层硬件进行解耦，满足人们随时随地、随心所欲的操作计算机硬件的要求。</p><p>作系统的官方定义是：英文名Operating System，简称OS。是计算机系统中必不可少的基础系统软件，它是应用程序运行以及用户操作必备的基础环境支撑，是计算机系统的核心。**从官方定义不难看出，操作系统（后统称为OS）首先是一个软件，是一个支撑软件，支撑应用软件和人们的操作。所以，它是一种特殊软件，主要由内核+库两部分实现（如下图所示）。</p><p><img src="https://i.loli.net/2019/04/15/5cb42b8be3291.jpg" alt></p><p>内核存在的目的就是将底层的硬件进行软件化封装，方便上层调用来操作硬件。而库的作用就是将内核的软件封装再构造成一个个标准函数，供上层应用去调用从而避免应用直接操作内核的风险。其次，它还是计算机系统的核心。我们现在讲的计算机系统都是冯诺依曼架构（如下图所示），由控制器、运算器、存储设备和输入输出设备四部分构成，OS就是这些部件协调运作赖以支撑的基础，所以它也是计算机系统的核心。</p><p><img src="https://i.loli.net/2019/04/15/5cb42bc5252e1.jpg" alt></p><p>综上，用一句话概括操作系统的概念就是：<strong>操作系统就是位于用户与计算机系统硬件之间用于传递信息系统程序软件。</strong></p><h2 id="什么是Linux"><a href="#什么是Linux" class="headerlink" title="什么是Linux"></a><strong>什么是Linux</strong></h2><p><img src="https://i.loli.net/2019/04/15/5cb42c1824c56.jpg" alt></p><p><strong><em>Linux系统组成如上图</em></strong></p><ul><li><strong>内核：</strong>是系统的心脏，是运行程序和管理像磁盘和打印机等硬件设备的核心程序。</li><li><strong>Shell：</strong>是系统的用户界面，提供了用户和内核进行交互操作的一种接口。它接收用户输入的命令并把它送入内核去执行，是一个命令解释器。但它不仅是命令解释器，而且还是高级编程语言，shell编程。</li><li><strong>文件系统</strong>：文件系统是文件存放在磁盘等存储设备上的组织方法，Linux支持多种文件系统，如ext3,ext2,NFS,SMB,iso9660等。</li><li><strong>应用程序：</strong>标准的Linux操作系统都会有一套应用程序例如X-Window,Open Office等。</li></ul><p>和windows一样，Linux也是一种操作系统。与windows的商业不同的是，Linux是一套完全开源的操作系统，其实现代码全部呈现给使用者。就像你亲自下厨做饭一样，所有的原材料和工序你都清楚，因此做出饭菜自然比外卖要安全可靠。所以，国内一些企业自研操作系统均是由Linux源码封装改造而来，其宣称”自主可控“，也无可厚非。</p><p>Linux在设计之初，是基于Intel x86 PC架构的，是一套多任务、多用户并支持多线程和多CPU的操作系统。其设计的本意就是打破商业软件版权的限制（因为当初unix系统被AT&amp;T回收版权，禁止向学生群体开放源码，从而引起版权纠纷），全世界都能使用的类unix系统兼容产品。从其1991年诞生到现在约30年的时间，Linux操作系统主要用于服务器领域、嵌入式开发，其在个人PC桌面领域应用较少，这也是其不被大众熟悉的原因。（目前，在个人PC桌面领域做的较好由国外的ubuntu、fedora，国内的深度deepin，中兴的新起点等操作系统）。其实，现在windows在个人桌面操作系统的优势除了软件生态以外，也不再剩下什么。如果Linux的软件生态得到广大发展，那么可以预期个人桌面系统将发生颠覆性的变化。这也是微软为什么在即将发布的windows 10的1903版本推出同时兼容读写Linux系统文件的原因，微软现在已经很着急啦：）。</p><p>全球超算99.9%都是使用Linux，全球和国内排名前1000的互联网公司90%的服务器也使用的是Linux，就是因为Linux系统优越性使其在服务器领域一举奠定了霸主地位，无论是windows还是mac os都无法与其竞争。Linux的优越性主要都继承自unix系统，主要由以下几点：</p><ul><li><p>具备开放源代码的程序软件，可自由修改。</p></li><li><p>Unix系统兼容，具备几乎所有Unix系统的优点。</p></li><li>可自由传播，无任何商业化版权制约。</li><li>适合Intel x86CPU系列架构的计算机。</li></ul><p>严格来说，Linux这个词本身只表示Linux内核，但是人们已经习惯用Linux来形容整个基于Linux内核的操作系统，并且是一种使用GNU通用公共许可证（GUN general public，GPL）工程的，包括各种工具和数据库的操作系统。</p><p>Linux内核除系统调用外，由五个主要的子系统组成：进程调度、内存管理、虚拟文件系统、网络和进程间通信(IPC)。</p><p>各个子系统的主要功能为： </p><p><strong>1、进程调度：</strong>它控制着进程对CPU的访问，当需要选择一个进程开始运行时，由调度程序选择最应该运行的进程；</p><p><strong>2、内存管理：</strong>它允许多个进程安全地共享主内存区域，支持虚拟内存；从逻辑上可以分为硬件无关的部分和硬件相关的部分；</p><p><strong>3、虚拟文件系统(VFS)：</strong>它隐藏了各种不同硬件的具体细节，为所有设备提供统一的接口，支持多达数十种不同的文件系统，分为逻辑文件系统和设备驱动程序；</p><p><strong>4、网络：</strong>它提供了对各种网络标准协议的存取和各种网络硬件的支持，分为网络协议和网络驱动程序两部分；</p><p><strong>5、进程间通信：</strong>支持进程间各种通信机制，包括共享内存、消息队列和管道等。</p><p>GNU的全称为GNU’s not Unix，意思是“GNU不是Unix”，GNU计划，又称革奴计划，是由Richard Stallman在1984年公开发起的，是FSF（自由软件基金会）的主要项目，这个项目成立的本意就是建立一套完全自由的可移植的类unix操作系统。在Linux内核发布的时候，GUN项目已经完成了除系统内核之外的各种必备软件的开发。在Linus Torvalds和其他开发人员的努力下，GNU项目的部分组件又运行到了Linux内核之上，例如：GNU项目里的Emacs、gcc、bash、gawk等，至今都是Linux系统中很重要的基础软件。因此，如今我们说的Linux操作系统实际上是GNU/Linux操作系统。</p><p>而GPL是一个最著名的开源许可协议，其核心是<strong>保证任何人有共享和修改自由软件的自由，任何人有权取得、修改和重新发布自由软件的源代码权利，但都必须同时给出具体更改的源代码。</strong>正是因为该协议的存在，才使得开源软件有如今如火如荼的发展局面。</p><h2 id="Linux系统启动顺序和基本概念"><a href="#Linux系统启动顺序和基本概念" class="headerlink" title="Linux系统启动顺序和基本概念"></a><strong>Linux系统启动顺序和基本概念</strong></h2><p>开机自检（BIOS)—&gt;MBR引导（512字节，其中前446字节是Grub菜单，后64字节是分区表）—&gt;GRUB菜单（选择启动系统）—-&gt;加载内核Kernel—&gt;运行INIT进程。其中，INIT进程在Linux系统的用PID编号为1来表示，意思为所有进程的“大佬”。</p><p><strong>BIOS：</strong>基本输入输出系统（basic input output system，BIOS），是一组固话到计算机主板ROM上的程序，保存着计算计算最重要的基本输入输出程序、系统设置信息、开机自检程序和系统自启动程序，为计算机提供最底层的、最直接的硬件设置和控制。</p><p><strong>MBR：</strong>一种硬盘分区格式。目前，硬盘分区格式主要有两种，分别是MBR和GTP。MBR，即主引导记录扇区（master boot record），位于整块硬盘的0磁道0煮面1扇区，用于操作系统对硬盘读写时，判断分区的合法性以及分区引导信息的定位。总共512字节，前446字节用于主引导记录，后64字节用于存储硬盘分区表（DPT），每个分区表大小16字节，共4个分区表，所以采用MBR分区格式的硬盘最多只能分出4个分区（主分区+扩展分区），最后两个字节”55，AA“是分区的结束标志。MBR分区表的格式如下：</p><p><img src="https://i.loli.net/2019/04/15/5cb42d40966b7.jpg" alt></p><p><strong>GPT：</strong>全局唯一分区格式，正在逐渐取代MBR成为新标准。它和统一的可扩展固件接口（unified extensible firnware interface，UEFI）相辅相成。UEFI用于取代BIOS，而GPT用于取代MBR。在GPT硬盘中，分区表中的位置信息存储在GPT头中，第一个扇区同样有一个与MBR类似的标记，叫做受保护的主引导记录（protected main boot record，PMBR）。其作用是当使用不支持GPT的分区工具时，整个硬盘将显示为一个受保护的分区，防止数据被破坏，其中存储的内容与MBR一样，之后才是GPT头部信息。与MBR相比，支持2TB以上的磁盘，如果使用fdisk分区，最大只能建立2TB大小的分区，创建大于2TB的分区时，需使用parted工具，同时必须使用64位操作系统。以下是GPT分区表的数据格式：</p><p><img src="https://i.loli.net/2019/04/15/5cb42d6337913.jpg" alt></p><p><strong>GRUB：</strong>多操作系统启动程序（GRand unified bootloader）。支持多操作系统引导，当系统中装载多操作系统时，在系统启动时便于用户选择。GRUB还可用于选择操作系统分区上的不同内核，也可用于向这些内核传递启动参数。Linux常见的引导程序包括：LILO、GRUB、GRUB2。CentOS 6.x系统和Ubuntu系统默认采用GRUB引导程序，所以当我们有需要编译GRUB菜单时，执行如下命令：</p><p>···</p><p>grub-mkconfig -o /boot/grub/grub.cfg</p><p>···</p><p>CentOS 7.x系统默认采用GRUB2引导程序，所以当我们有需要编译GRUB菜单时，执行如下命令：</p><p>···</p><p>grub2-mkconfig -o /boot/grub2/grub.cfg</p><p>···</p><p>GRUB加载引导程序的流程如下：</p><p><img src="https://i.loli.net/2019/04/15/5cb42e226d582.jpg" alt></p><p>GRUB2是基于GRUB开发的更加安全强大的多系统引导程序，同时采用模块化设计，使得GRUB2核心更加尽量，使用更加灵活，也不需要像GRUB那样分为stage1、stage1.5和stage2三个阶段。</p><p><strong>init：</strong>就是系统的不同运行级别对应加载的启动文件。在Linux跟目录下的/etc/目录下，有与系统运行级别对应的rc开头的目录，里面存在对应系统运行级别的脚本文件。Linux内核加载完成后，通过加载这些启动文件完成系统的初始化。</p><p><img src="https://i.loli.net/2019/04/15/5cb42e68b6ed6.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux系统基础介绍&quot;&gt;&lt;a href=&quot;#Linux系统基础介绍&quot; class=&quot;headerlink&quot; title=&quot;Linux系统基础介绍&quot;&gt;&lt;/a&gt;&lt;strong&gt;&lt;em&gt;Linux系统基础介绍&lt;/em&gt;&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;本文作为Linux操作系统开篇文章，主要介绍一些操作系统的基础概念和原理，然后简要介绍Linux的发展历史，以及市面上常见的Linux系统版本。
    
    </summary>
    
      <category term="Linux" scheme="https://kkutysllb.cn/categories/Linux/"/>
    
    
      <category term="基础概念" scheme="https://kkutysllb.cn/tags/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>2018-10-10-云计算的技术架构</title>
    <link href="https://kkutysllb.cn/2018/10/10/2018-10-10-%E4%BA%91%E8%AE%A1%E7%AE%97%E7%9A%84%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/"/>
    <id>https://kkutysllb.cn/2018/10/10/2018-10-10-云计算的技术架构/</id>
    <published>2018-10-09T16:09:45.000Z</published>
    <updated>2019-02-18T00:49:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="云计算总体技术架构"><a href="#云计算总体技术架构" class="headerlink" title="云计算总体技术架构"></a>云计算总体技术架构</h2><p>下图是一张从云计算上下文参考架构引申出的云计算总体技术架构图。其实，当我们面临一个复杂系统的认知学习，首先需要从全局对其做鸟瞰式概览，将其关键部分抽象为几个关键模块。然后，分析每个关键模块之间的关联，也就是上下文对接关系。最后，再由上下文参考架构拓展出具体关键流程和服务模块。做到上述“收放自如”，才算真正入门，才具备继续深钻的基础条件。：）<a id="more"></a></p><p><img src="https://i.loli.net/2019/02/19/5c6ad92c230a4.jpg" alt></p><p>上图左边是云计算的参考架构，主要由4个关键子模块和1个关键服务组成。4个关键子模块包括：CloudDevice（云设备）、User（用户&amp;开发者）、ServiceCenter（运营服务中心）和OperatorCenter（运维中心）。而将4个关键子模块进行衔接的关键服务就是我们常说的IaaS、PaaS和SaaS三层平台的逻辑抽象，由IaaS层的CloudOS统一完成纳管和呈现。</p><p>对上下文架构参考图进一步拓展，就是右边的云计算解决方案的整体技术架构图。这张整体技术架构图向上可以支撑公有云、私有云、电信云和混合云的各种方案部署。虽然，其涉及的技术方案很多，但其本质上还是底层四个关键技术领域。即，计算、网络、存储和安全。说白了，云计算要想彻底精通，必须同时精通<strong>计算、网络、存储和安全</strong>四个领域。</p><h2 id="云计算的核心技术识别"><a href="#云计算的核心技术识别" class="headerlink" title="云计算的核心技术识别"></a>云计算的核心技术识别</h2><p><img src="https://i.loli.net/2019/02/19/5c6ad96529c75.jpg" alt></p><p><strong>虚拟化及资源调度平台</strong></p><ul><li><p>虚拟化软件：高性能、高可靠性、智能调度算法</p></li><li><p>数据中心的一体化自动管控</p></li><li><p>分布式计算/存储框架</p></li><li><p>虚拟化的硬件加速</p></li></ul><p><strong>计算与存储平台</strong></p><ul><li><p>定制化的服务器与存储：讲话涉及大内存，高网络/存储IOPS</p></li><li><p>数据中心安全性：可信赖、完整性、可用性</p></li></ul><p><strong>网络平台</strong></p><ul><li><p>高密度、低成本的10GE互联</p></li><li><p>网络的集群与虚拟化</p></li></ul><p><strong>基础设施平台</strong></p><ul><li><p>E2E的集成交付能力</p></li><li><p>绿色节能的工程设计</p></li></ul><p><strong>从物理设备（服务器、存储和网络设备）、虚拟化软件平台、分布式计算和存储资源调度、一体化自动化管控软件、虚拟化数据中心的安全和E2E的集成交付能力，都是构建高效绿色云数据中心的关键技术。</strong></p><ul><li><p>简化设计的大内存、高网络和存储IOPS的服务器，可以为云数据中心提供强大的计算能力。</p></li><li><p>高IOPS，支持链接克隆、精简置备、快照等功能的存储设备，可以为数据中心提供强大的存储能力。</p></li><li><p>高密度、低成本，支持大二层网络技术的交换设备为数据在二层网络流动提供交换能力。</p></li><li><p>虚拟化软件平台，可以抽象物理资源为资源池，给云用户配置不同规格虚拟机提供底层支撑。</p></li><li><p>灵活、高效的分布式计算或存储框架，为云计算的资源调度和调整提供支撑。</p></li><li><p>从门禁监控、网络接入、虚拟化平台软件安全、经过安全加固的OS和DB到用户的分权分域管理，保证数据中心的放心使用。</p></li><li><p>一体化自动化的管控软件，提升维护人员的效率，降低企业成本。</p></li></ul><h2 id="云计算的关键技术"><a href="#云计算的关键技术" class="headerlink" title="云计算的关键技术"></a>云计算的关键技术</h2><p>云计算的单点技术都是“老”技术，组合起来却有无与伦比的的价值。马云有句话说的好，从技术层面来讲，云计算的就是新瓶装旧酒。</p><p><img src="https://i.loli.net/2019/02/19/5c6ada3096095.jpg" alt></p><p><strong>计算架构：</strong>支持scale out模式，整体性能最优，基于软件可靠性和可扩展性。</p><p><strong>云计算硬件</strong></p><ul><li><p>服务器：高可靠性、高性能</p></li><li><p>网络：高密度以太网交换机</p></li><li><p>存储：低成本、多备份</p></li></ul><p><strong>云计算软件</strong></p><ul><li><p>并行计算技术</p></li><li><p>分布式存储</p></li><li><p>分布式文件管理</p></li><li><p>虚拟化技术</p></li><li><p>智能化云计算系统管理技术</p></li></ul><p>通过对多项核心技术进行归类汇总，可归结为三个方面：<strong>整体的计算架构、承载的硬件设备和软件系统。</strong></p><ul><li><p>整体的计算架构：需要涵盖高性能、高可靠和可扩展。</p></li><li><p>云计算硬件包括：高可靠和高性能的计算服务器提供计算资源；低成本、数据安全的存储设备提供数据存储空间；支持大二层网络的高密度交换机进行数据的通信和交流。</p></li><li><p>云计算软件包括：用于大数据的并行分析计算技术；整合存储资源提供动态可伸缩资源池的分布式存储技术；用于数据管理的分布式文件管理；计算、存储等资源池化的虚拟化技术；简化运维人员工作，方便高效智能运维的系统管理技术。</p></li></ul><h2 id="云计算的硬件技术：计算架构"><a href="#云计算的硬件技术：计算架构" class="headerlink" title="云计算的硬件技术：计算架构"></a>云计算的硬件技术：计算架构</h2><p><img src="https://i.loli.net/2019/02/19/5c6adab8e0aba.jpg" alt></p><p>早起许多IT系统开始很简单，但当需要进行系统扩展时就会变得复杂。升级系统最常见的原因是需要更多的容量，以支持更多的用户、文件、应用程序或连接的服务器。常见的系统扩展方式有Scale up和Scale out两种。</p><ul><li><p>Scale up 纵向扩展架构主要是利用现有的系统，通过不断增加存储容量来满足数据增长的需求。但是这种方式只增加了容量，而带宽和计算能力并没有相应的增加。所以，整个系统很快就会达到性能瓶颈，需要继续扩展。</p></li><li><p>Scale out 横向扩展架构的升级通常是以节点为单位，每个节点往往将包含容量、处理能力和I/O带宽。一个节点被添加到系统，系统中的三种资源将同时升级。而且，Scale out架构的系统在扩展之后，从用户的视角看起来仍然是一个单一的系统。所以Scale out方式使得系统升级工作大大简化，用户能够真正实现按需购买，降低TCO。</p></li></ul><p><strong>云计算的设计思想是以最低成本构建出整体的性能最优，与传统电信设备和IT设备（服务器、大型机、企业存储等）追求设备可靠性和性能的思路完全不同。</strong></p><h2 id="云计算的硬件技术：存储系统"><a href="#云计算的硬件技术：存储系统" class="headerlink" title="云计算的硬件技术：存储系统"></a>云计算的硬件技术：存储系统</h2><p><img src="https://i.loli.net/2019/02/19/5c6adb2242e07.jpg" alt></p><p>企业存储一般采用专用的存储设备，成本高。</p><p>分布式存储系统把使用便宜IDE/SATA硬盘的服务器本地存储构建存储资源池，既降低了服务器的成本，也降低了存储成本，构建最低成本的计算和存储。</p><p>通过“分布式存储和多副本备份”来解决海量信息的存储和系统可靠性，数据存储可以配置多份副本，保证数据的安全性。</p><h2 id="云计算的硬件技术：数据中心的联网"><a href="#云计算的硬件技术：数据中心的联网" class="headerlink" title="云计算的硬件技术：数据中心的联网"></a>云计算的硬件技术：数据中心的联网</h2><p><img src="https://i.loli.net/2019/02/19/5c6adb4da82c4.jpg" alt></p><p><strong>东西向流量增长</strong></p><ul><li><p>并行计算业务(如：搜索)需要服务器集群协同运算，产生大量横向交互流量</p></li><li><p>虚拟机的自由部署和动态迁移，虚机间需要实时同步大量的数据</p></li></ul><p>随着云计算的发展，越来越多业务承载在数据中心的虚拟机上，业务数据的流动从南北向转变为东西向，对数据中心网络的需求和冲击提出了很大挑战。</p><p>数据中心内部虚拟机的迁移促进了大二层网络虚拟交换技术的发展，支持大容量数据的通信和超高的端口密度，可以连接更多的服务器提升数据中心的处理能力。</p><h2 id="云计算的软件技术：集群管理"><a href="#云计算的软件技术：集群管理" class="headerlink" title="云计算的软件技术：集群管理"></a>云计算的软件技术：集群管理</h2><p><img src="https://i.loli.net/2019/02/19/5c6adb8e7b9d7.jpg" alt></p><p>云计算虚拟化平台软件，支持分布式的集群管理。可以针对业务模型，对物理服务器创建不同的业务集群，并在集群内实现资源调度和负载均衡，在业务负载均衡的基础上实现资源的动态调度，弹性调整。</p><p>云计算虚拟化平台需要支持各种不同的存储设备，包括本地存储、SAN存储、NAS存储和分布式本地存储，保证业务的广适配性。</p><p>同时，提供链接克隆、资源复用、精简置备和快照功能，降低企业成本并提供高效率、高可靠性的资源池。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>截止目前，云计算基础入门部分已更新完毕，此部分主要是针对打算入坑的新人，给其一个总体上概括认知。后续本打算重写虚拟化技术。但是，考虑到OpenStack以及Docker容器涉及很多Linux基础知识，故临时调整更新内容为重写Linux部分。主要涉及：Linux系统组成、常用命令总结（这部分是我自己总结，大家可下载留存参考）、三剑客基本使用教程和shell编程基础。</p><p>完成Linux部分更新后，再继续重写虚拟化技术入门，涉及计算、存储和网络虚拟化三部分。以上与目前更新云计算基础统一构成基础概念部分。所谓“基础不牢，地动山摇”，因此这部分虽然是入门，其实还是很重要的部分。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;云计算总体技术架构&quot;&gt;&lt;a href=&quot;#云计算总体技术架构&quot; class=&quot;headerlink&quot; title=&quot;云计算总体技术架构&quot;&gt;&lt;/a&gt;云计算总体技术架构&lt;/h2&gt;&lt;p&gt;下图是一张从云计算上下文参考架构引申出的云计算总体技术架构图。其实，当我们面临一个复杂系统的认知学习，首先需要从全局对其做鸟瞰式概览，将其关键部分抽象为几个关键模块。然后，分析每个关键模块之间的关联，也就是上下文对接关系。最后，再由上下文参考架构拓展出具体关键流程和服务模块。做到上述“收放自如”，才算真正入门，才具备继续深钻的基础条件。：）
    
    </summary>
    
      <category term="云计算" scheme="https://kkutysllb.cn/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    
      <category term="基础概念" scheme="https://kkutysllb.cn/tags/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>2018-09-25-云计算带来哪些变化</title>
    <link href="https://kkutysllb.cn/2018/09/25/2018-09-25-%E4%BA%91%E8%AE%A1%E7%AE%97%E5%B8%A6%E6%9D%A5%E5%93%AA%E4%BA%9B%E5%8F%98%E5%8C%96%EF%BC%9F/"/>
    <id>https://kkutysllb.cn/2018/09/25/2018-09-25-云计算带来哪些变化？/</id>
    <published>2018-09-25T01:00:00.000Z</published>
    <updated>2019-02-18T00:49:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="传统的IT架构与云计算架构投资决策的差异"><a href="#传统的IT架构与云计算架构投资决策的差异" class="headerlink" title="传统的IT架构与云计算架构投资决策的差异"></a>传统的IT架构与云计算架构投资决策的差异</h2><blockquote><p>传统的IT架构俗称三层架构，即，表示层、业务逻辑层和数据访问层。虽然三层架构将系统在逻辑上分层了三层，但它并不是物理意义上的分层。也就是说对于不同层的代码而言，经历编译、打包、部署之后，所有的代码最终还是运行在同一个进程之中。<a id="more"></a></p></blockquote><p><img src="https://i.loli.net/2019/02/18/5c6a7e5c1f294.jpg" alt></p><p>对于这种功能集中、代码中心化、一个发布包、部署后运行在同一个进程中应用程序，我们称之为单块架构应用。企业采用这种架构开发某个业务时，对计算、网络、存储、服务器资源的需求都是独占的，不同业务之间是一种烟囱式的条块化分割。随着业务的增加，需求功能的迭代，单块架构只能通过增加自己独占资源组内的资源来实现，即使其他应用资源占用很低，也无法共享其它应用的空闲资源。因此，这种架构模式已经很难满足业务快速变化的需要。</p><blockquote><p>一方面，代码的可维护、扩展性、灵活性在降低；</p><p>另一方面，系统的修改成本、构建以及维护成本在增加，因此单块架构的改造与重构势在必行。</p></blockquote><p>随着云计算的出现，在技术上面其实有四点最关键的技术：</p><p>第一个技术就是<strong>服务器虚拟化</strong>，前面讲到了，就是把一台物理的服务器，当成很多逻辑的服务器来用，这种分割的目的就是那提升资源共享利用率，达到业务可以快速的部署，代码重构维护简单的目的。</p><p>第二个技术就是<strong>分布式的存储</strong>，就是把一些原来的专用大存储服务器，比如存储9000那种大的设备大的柜子。把它里面设计成一台一台小的服务器，通过软件方式融合在一起进行管理，当成是一个“存储池”来管理这个资源，这种就是分布式的存储。分布式的存储的好处是可以提高存储的速度，同时以按照客户的需要去扩容。比如：可以像虚拟CPU和虚拟内存那样，实现存储资源的弹性部署。同时，随着Server SAN概念的提出，分布式存储的硬件基于x86通用服务器，远比专用存储服务器的硬件成本低。</p><p>第三个技术就是<strong>软件定义的网络</strong>，也就是现在炒的火热的SDN。我们都知道网络这一块管理起来很复杂，需要提前做好规划，提前分配IP地址。那么，如何通过软件来实现呢？就是通过云计算实现的云资源池，利用里面基础虚拟网络资源，分析这类资源的随时变化，通过编程的方式将这种变化通过协议流去控制实现，通过软件去管理，自动化完成。这就是软件定义网络概念的本质。</p><p>第四个技术就是<strong>REST</strong>，它本质上是一个协议，一种资源状态转移协议。前面说过传统IT的三层架构，主要分为表示层、业务逻辑层和数据访问层。由于在云计算架构里，它的资源是池化的，资源之间是共享的（隔离的本质其实是最大的共享！详见后面OpenStack Neutron部分论述），交互很快，用传统的三层架构软件去实现这种调度根本不现实。因此，就出现了REST协议，它其实是将传统三层架构的功能做了整合，通过它应用可以直面底下的虚拟资源池。这相当于是一个资源调度程序，由应用程序调用，直接去使用这种云的资源。当这种弹性的资源调度模式与上层应用关联起来之后，应用不够或者坏掉了，都没关系，直接再起一个新应用，让应用扩展起来，底层的虚拟机资源也随之增加。这里面有几个特点，第一个就是这种协议是一种API接口协议，所有做开发的人都必须遵循的一种接口协议，为分布式开发和CI/CD(持续集成，持续交付）创造了条件。第二个是云计算采用轻量级的云OS，其主要职责是纳管，并不是具体实现。其上应用恢复与扩展的速度比传统的三层架构更快，为敏捷开发创造了条件。但是，它唯一的遗憾还是未能有一个组织出来进行标准化定义，因此兼容性方面还有缺陷。直到现在容器技术的兴起，才使上述两个场景（CI/CD和敏捷开发）真正落地。</p><h2 id="云时代商业模式的变化：从自建变为租用"><a href="#云时代商业模式的变化：从自建变为租用" class="headerlink" title="云时代商业模式的变化：从自建变为租用"></a>云时代商业模式的变化：从自建变为租用</h2><blockquote><p>企业由纯粹的自建IT系统逐步转向混合云的模式。</p></blockquote><blockquote><p>部分核心应用私有云，一般应用租用公有云服务。</p></blockquote><blockquote><p>云服务又分为：IaaS、PaaS、SaaS三种方式。</p></blockquote><p><img src="https://i.loli.net/2019/02/18/5c6aa4d732ab6.jpg" alt></p><p>以前，IT企业提供业务需要自己建设机房，买了一堆服务器、交换机部署一个数据中心，然后在上面再部署自己的软件来提供服务。往往这都是一笔不小的花费，从而导致好多创业公司的启动经费过高。</p><p>随着IDC机房的出现，云计算技术的普及，这种模式发生了变换。好多公司完全可以通过租借云DC的方式来部署自己的业务软件。所谓的云DC，其实就是通过云计算技术将IDC机房中基础设施通过虚拟化资源的方式来统一提供，租用的费用远远比自建少得多，同时可以节省一笔维护开销，从而导致创业的门槛大大降低。</p><p>往往这些企业只需要购买很少一部分服务器和交换机来部署自己的核心业务，存储自己的核心数据，同样也使用云计算来提高资源利用率，降低成本，这部分往往我们称为企业私有云。非核心的企业业务软件和数据，往往通过公有云提供商提供云DC/云主机部署，这部分往往我们称为公有云。两者的结合，就诞生了混合云的概念。因此，混合云是从企业业务的全局部署角度提出的，并不是云计算的新技术分支，现在IT企业提供业务大部分都是通过混合云的方式提供。与混合云类似的还有行业云，两者之间的区别非常小，可以合并为一种。</p><p>那么租用云DC到底租用的是什么？这个从需求者不同需求角度来说，分为IaaS（基础设施即服务），PaaS（平台即服务），SaaS（软件即服务）。有些企业，软件开发能力很强，具备平台级的开发能力，但是缺少运行软件平台的服务器、存储和交换机。为了节省成本，他们往往都是向云服务提供租用云主机，将自己的软件部署在云主机上，这种租用的就是IaaS。另一些企业，具备应用层软件的开发能力，但不具备数据之间逻辑处理的能力（即，算法），同时为了节省成本，他们往往都是云服务提供上租用开发平台（如大数据处理），也连带底层基础设施（云主机）一起租用，这种租用的就是IaaS+PaaS。目前还没有哪家企业只租用PaaS，自建IaaS的方式来部署自己的业务。至于SaaS的租用，目前只涉及个人办公（如web版office）或开发领域（如Mob等应用），很少有面向企业的服务应用。</p><h2 id="云时代建设模式的变化：从烟囱变为水平"><a href="#云时代建设模式的变化：从烟囱变为水平" class="headerlink" title="云时代建设模式的变化：从烟囱变为水平"></a>云时代建设模式的变化：从烟囱变为水平</h2><blockquote><p>芯片、新介质取得突破，以及CPU、硬盘、网络性能大幅提升为IT架构的水平化演进提供了技术支撑。云计算经历了从虚拟化—云资源池—平台&amp;应用的逐步发展阶段。</p></blockquote><p><img src="https://i.loli.net/2019/02/18/5c6aceca9b79b.jpg" alt></p><p>云服务提供商为了提供各种云服务，必然要建设相应的数据中心，这种建设是去IOE化的。去IOE化的概念，最早是阿里巴巴提出的，其本意是，在阿里巴巴的IT架构中，去掉IBM的小型机、Oracle数据库、EMC存储设备，代之以自己在开源软件基础上开发的系统。说白了就是结合开源软件技术，将IOE的各层级功能通过通用硬件平台，分布式架构，软硬件解耦和软件定义存储的方式实现，通过Cloud OS进行纳管，并统一对外提供服务。</p><p><img src="https://i.loli.net/2019/02/18/5c6ad1d8b4db7.jpg" alt></p><p>前面也提到了，云计算的出现不是突然出现的，详见博文 <a href="https://kkutysllb.cn/2018/09/12/2018-09-12-%E4%BA%91%E8%AE%A1%E7%AE%97%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/#more">云计算的前世今生</a>。随着软硬件技术的发展，他主要经历了三个发展阶段。第一个阶段就是虚拟化阶段，代表技术就是VMware和Xen，主要通过虚拟化技术来提升企业资源利用率，从而降低成本。第二个阶段是云DC阶段，代表技术就是OpenStack，但是OpenStack最成熟的部分还是其IaaS服务提供，这个阶段主要通过提供云主机和云DC来降低企业运营成本。第三个阶段就是现在火热的容器化应用阶段，其实容器也是一种虚拟化技术，属于轻量级操作系统级别的虚拟化。它是以软件进程的方式来封装各个应用模块，通过共享底层操作系统内核，来提供各种平台服务和应用服务（PaaS+SaaS）。通过这种技术，使得前几年DevOps概念完美落地并真正意义上实现敏捷开发，这是一种企业应用现有管理模式的变革。</p><h2 id="云计算给企业带来哪些变化"><a href="#云计算给企业带来哪些变化" class="headerlink" title="云计算给企业带来哪些变化"></a>云计算给企业带来哪些变化</h2><blockquote><p>要说云计算技术给企业带来了哪些变化，最明显的还要数银行。</p></blockquote><p><img src="https://i.loli.net/2019/02/18/5c6ad4f68aa43.jpg" alt></p><p>银行采用基于云计算的新架构以后，它的第一个变换就是IT资源池化了，即使有一些资源损坏了，它还可以继续工作，并不影响它的业务。所以这样提高了就是业务的质量，减少了业务中断，保证这个业务的连续性，全年的业务停机时间就大大减少。</p><p>第二个变化就是业务提供的速度，当业务需要很多IT资源时，可以通过资源弹性扩缩容的方式，来满足业务需求。不像以前，一个业务办理的好慢好烦，甚至死机，影响客户的体验，客户就可能去选择其他家更快业务。所以通过把资源管理好，也让IT人员有更多的创新机会，可以开发包括手机端的应用，让更多的人通过手机随时随地去办理业务。不知你注意到没有，国内这么多银行，招商银行在这方面一直走在其他银行前面。</p><p>还有更重要的一点对于企业来说，它的业务成本的降低。银行对散户，对个人的业务，实际上都是亏钱的，个人取钱的交易或者是存钱的交易，银行都要投入人力和场地等费用，而现今，通过手机银行和互联网银行，可以把这个散户交易成本降下来，通过云计算等互联网技术，免除了场地网点的费用而且业务处理速度非常的快，用户体验也提升了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;传统的IT架构与云计算架构投资决策的差异&quot;&gt;&lt;a href=&quot;#传统的IT架构与云计算架构投资决策的差异&quot; class=&quot;headerlink&quot; title=&quot;传统的IT架构与云计算架构投资决策的差异&quot;&gt;&lt;/a&gt;传统的IT架构与云计算架构投资决策的差异&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;传统的IT架构俗称三层架构，即，表示层、业务逻辑层和数据访问层。虽然三层架构将系统在逻辑上分层了三层，但它并不是物理意义上的分层。也就是说对于不同层的代码而言，经历编译、打包、部署之后，所有的代码最终还是运行在同一个进程之中。
    
    </summary>
    
      <category term="云计算" scheme="https://kkutysllb.cn/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    
      <category term="基础概念" scheme="https://kkutysllb.cn/tags/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>2018-09-12-云计算的前世今生</title>
    <link href="https://kkutysllb.cn/2018/09/12/2018-09-12-%E4%BA%91%E8%AE%A1%E7%AE%97%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/"/>
    <id>https://kkutysllb.cn/2018/09/12/2018-09-12-云计算的前世今生/</id>
    <published>2018-09-12T00:00:00.000Z</published>
    <updated>2019-02-18T00:49:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="云计算的发展历程"><a href="#云计算的发展历程" class="headerlink" title="云计算的发展历程"></a>云计算的发展历程</h2><blockquote><p>云计算的历史也是蛮好玩的…</p></blockquote><p>一开始就是在2003年之前，大家都在在提升CPU的计算能力，提升存储的空间，使得CPU性能越来越高、存储变得更大。<a id="more"></a><br><img src="https://i.loli.net/2019/02/18/5c6a5fd1765ca.jpg" alt></p><p>到了2003年以后呢，企业的数据中心里面发现资源已经很空闲，因为架构设计的原因，让这些服务器很多时间都处在平均不到5%的使用率，大部分99%都是空闲的。相当云投资一千块，其实只用了五块钱，实际上产生了很大的浪费。同时，机房空间、动力等基础设施资源被占用过多，导致数据中心内部无法放置更多机柜、机架和服务器，需要买地建设新的机房（按照国内的地价/房价，这基本是不可能的）。因此，在2003年VMware这个厂商提供了服务器虚拟化的技术，就是把一台服务器一台设备，切成很多虚拟的小块服务器，也就是俗称的“虚拟机”。而让业务应用在虚拟机上面去工作，这就叫服务器虚拟化。</p><p>这个技术解决了数据中心里面机房空间和动力资源不够的问题，原来需要十台服务器的，现在在一台高级的服务器里面切了十份，分别给10个业务应用使用，即使这样也就才用了40%的CPU，电力节省了接近9/10，而且一个机房里面容量就可以做二十倍数的的提升。原来部署一百台物理的服务器，现在可以部署两千台虚拟服务器，大大的提升了资源的利用率。而虚拟化的另一个好处就是还大幅提升了客户业务的创新的积极性，因为以前他们服务器都摆不下，好多东西不能做，现在摆下了，所以他要做什么东西都可以试试。但是这个虚拟化技术只解决了资源的共享问题，还没解决运营效率问题。</p><p>到了2006年的时候，亚马逊提出了公有云的服务，那时还不叫云计算，叫Amazon Web Service, 简称AWS（现在亚马逊的云计算项目还是沿用这个叫法）。亚马逊大家都知道，它原本是一个做超市的，超市的概念就是你需要你去拿，拿了就到门口结帐，结帐你就拿走。然后亚马逊它把这个计算资源也当成一种，把服务器也当成资源去卖，但是它卖的不是物理的，不是让你搬一台服务器走。而是建好一个数据中心，当你用的时候，你要多少台我们就给你多少台，你只要刷信用卡在网上做支付，你就可以使用这些逻辑上提供给你的资源，这也是虚拟化资源第一次被当成商品出售的案例。随后，Amazon在此基础上提出了云计算的概念，并开发出了公有云业务。亚马逊的这种公有云的这种服务对企业而言，想做的时候，只要付钱就可以做了。而且一般企业业务部门都很有钱，所以业务部门的愿意投钱去做这个事情。</p><p>到了2010年的时候，出现了另外一种云计算架构，叫OpenStack。它是NASA就是美国太空总署那个NASA和RackSpace联合做的。RackSpace也是做公有云服务的运营商，就像我们的阿里云一样，它也是想学习亚马逊。但是它的人没有亚马逊的团队这么大，所以它把这个架构给开源出来，形成一个OpenStack开源社区，大家都在OpenStack上面去开发完善，然后让这个框架变得更好，目前OpenStack会聚了全球的研发力量，并吸引了几乎全球所有主流IT厂商的支持，帮它完善这个架构，形成了云计算领域一个全新的强大生态系统。OpenStack社区把这个架构公开出来以后，各个企业都看到了一个新的技术，可以运用到他们自己企业里面，所以很多企业都开始基于OpenStack做自己的私有云，让自己家的IT，变得效率更高，资源更有效。</p><p>然后，到了2014年以后，很多企业经过这么多年的建设以后，基本都走在了公有云和私有云这两条路上，私有云就是在家里，自建自用，不对外。公有云就是公开对外出售虚拟资源（如服务器、负载均衡器、防火墙等）在亚马逊、阿里或者华为都有这类服务，只要花钱买就可以。很多企业，尤其是中小企业，无力承担基础设施建设费用，就是通过购买EC2（云计算服务中资源服务器）来部署它的业务。还有一些企业，将一部分业务部署在公有云上，另一部分私密性业务部署在私有云上，这样就合成了一个混合云的状态。</p><h2 id="云计算技术的演进历程"><a href="#云计算技术的演进历程" class="headerlink" title="云计算技术的演进历程"></a>云计算技术的演进历程</h2><blockquote><p>随着云计算技术走向成熟，在混合云时代，企业对于云计算的相关技术成熟度的问题已经不太关注了。企业新的追求是，让IT的人员怎么在一个团队的模式下面，对公有云和私有云的混合云资源进行统一的管理。这是一个管理的概念，也是混合云构建的核心。</p></blockquote><p>云计算（Cloud Computing）是分布式计算（Distributed Computing）、并行计算（Parallel Computing）和网格计算（Grid Computing）的发展或者说是这些计算机科学概念的商业实现。</p><p><img src="https://i.loli.net/2019/02/18/5c6a661e66cb1.jpg" alt></p><p><strong>并行计算（Paralled Computing）：</strong>同时使用多种计算资源解决计算问题的过程，主要目的是快速解决大型且复杂的问题。</p><ul><li>特点：把计算任务分派给系统内多个计算单元。</li></ul><p><strong>分布式计算（Distributed Computing）：</strong>把一个需要巨大计算能力才能解决的问题分成多个小部分，把这些小部分分配给多个计算进行处理，最后综合这些计算结果得到最终的结果。</p><ul><li>特点：分配计算任务到网络中多台独立的机器。</li></ul><p><strong>网格计算（Grid Computing）：</strong>利用互联网把地理上广泛分布的各种资源连成一个逻辑的整体，就像一台超级计算机。</p><ul><li>特点：分布式计算的一种，为用户提供一体化的信息和应用服务。</li></ul><h2 id="云计算的部署模式"><a href="#云计算的部署模式" class="headerlink" title="云计算的部署模式"></a>云计算的部署模式</h2><blockquote><ul><li>私有云（Private Cloud）： 企业利用自有或租用的基础设施资源自建的云。</li></ul></blockquote><blockquote><ul><li>社区云/行业云（Community cloud）：为特定社区或行业所构建的共享基础设施的云。</li></ul></blockquote><blockquote><ul><li>公有云（Public cloud）：出租给公众的大型的基础设施的云。</li></ul></blockquote><blockquote><ul><li>混合云（Hybrid cloud）：由两种或两种以上部署模式组成的云。</li></ul></blockquote><p><img src="https://i.loli.net/2019/02/18/5c6a674bb56ce.jpg" alt></p><p>从部署模式上看，云计算又分为私有云、社区云也就是行业云、公有云、和混合云，这几种形态，这里也给出了具体的定义。简单理解：</p><ul><li><p>私有云就是企业建在自家院子里的，只给自己用的云，有些公司特别是公有云厂商喜欢把“私有云”称作“专有云”，名字不同，但含义基本相同，虽然这些厂商不愿意承认。</p></li><li><p>社区云既行业云，应用范围要比私有云广泛，更像是由家庭和家族的关系，往往应用在某个特定的区域或特定行业，主要给特殊血缘关系的行业或社区家族成员使用。</p></li><li><p>公有云的使用范围则更加宽泛，基本上只要给钱谁都可以用，因此公有云的规模往往也更大。</p></li></ul><p>但公有云的用户鱼龙混杂，像火车站一样，而且目标明显，不仅使用的好人多，惦记着甚至使用的坏人也不少，所以经常成为黑客及非法集团的攻击或信息偷窃目标。但瑕不掩瑜，人们不能因为火车上有小偷，就不坐火车了。但贵重的东西，比如大额现金最好就别随身带了，放家里由家人看着最保险，也就是在使用公有云的同时还使用私有云。而且希望公有云与私有云能很好的协同。这就是混合云了。</p><h2 id="云计算当前的商业模式"><a href="#云计算当前的商业模式" class="headerlink" title="云计算当前的商业模式"></a>云计算当前的商业模式</h2><blockquote><ul><li>云基础设施即服务（IaaS）— 出租处理能力、存储空间、网络容量等基本计算资源。</li></ul></blockquote><blockquote><ul><li>云平台即服务（PaaS）— 为客户开发的应用程序提供可部署的云环境。</li></ul></blockquote><blockquote><ul><li>云软件即服务（SaaS）— 在网络上提供可直接使的应用程序。</li></ul></blockquote><p>现在不止这几种，还有存储即服务，桌面即服务，数据中心即服务等等。</p><p>在服务模式上，云计算分为三种，包括：IaaS 基础设施即服务、PaaS 开发平台即服务、SaaS 软件即服务这三种模式。</p><ul><li><p><strong>IaaS</strong>，就是以前买IBM、HP、DELL、华为服务器存储跑企业业务（比如：生产管理业务、财务、市场客户管理、邮箱等），现在企业把业务放到Amazon的网站或华为企业云服务（公有云）网站就全搞定了。简单讲就是由“买”变“租”。大型企业的IT部门也可以以IaaS服务的形式，对内部业务部门提供服务，然后进行内部结算。</p></li><li><p><strong>PaaS</strong>，就是以前企业需要业务软件的时候，软件开发商在自己公司开发完在卖给企业客户，还要派人去安装软件。现在开发、安装都在企业客户那里全做了。当然给的钱也不再是软件费而是人头费了。</p></li><li><p><strong>SaaS</strong>，就是以前写汇报胶片用微软PPT软件，现在登录<a href="www.prezi.com">www.prezi.com</a>，在那个网站上就可以写胶片了，很酷。</p></li></ul><h2 id="云计算的8个通用特点"><a href="#云计算的8个通用特点" class="headerlink" title="云计算的8个通用特点"></a>云计算的8个通用特点</h2><blockquote><ul><li>大规模（Massive scale）</li></ul></blockquote><blockquote><ul><li>同质化（Homogeneity）</li></ul></blockquote><blockquote><ul><li>虚拟化（Virtualization）</li></ul></blockquote><blockquote><ul><li>弹性计算（Resilient computing）</li></ul></blockquote><blockquote><ul><li>低成本软件（Low cost software）</li></ul></blockquote><blockquote><ul><li>地理分布（Geographic distribution）</li></ul></blockquote><blockquote><ul><li>服务定位（Service orientation）</li></ul></blockquote><blockquote><ul><li>先进安全技术（Advanced security technologies）</li></ul></blockquote><p>这是美国国家标准与技术研究院给云计算列出的8个通用特点：</p><p><strong>大规模（Massive scale）</strong>，因为云计算服务把IT的资源供应集中化了，自然规模很大。也正因为如此，量变导致质变，使得云计算与传统IT有了众多的区别。</p><p><strong>同质化（Homogeneity）</strong>，也可以理解成标准化，这点倒是和用电很类似，大家要保持相同电压、插座接口，这样人们的电器和各种设备才能被广泛使用。</p><p><strong>虚拟化（Virtualization）</strong>，有两层含义，一个是计算单元的精细化，一块蛋糕太大，一个人吃不了，那最好切成小块，大家分着吃，也就是让每个计算单元更小，这样可以充分利用IT资源；另外一层含义是软硬件的分离，虚拟化之前软件和指定硬件是绑在一起的，虚拟化之后软件在所有硬件上可以自由的迁移，这跟人们由买房变成租房是一样的，既然北上广深的房价太高，很多人便租房住了，拎个箱子想住哪就住哪。</p><p><strong>弹性计算（Resilient computing）</strong>，在前面已经说过，指的是IT资源供给可弹性伸缩。</p><p><strong>低成本软件（Low cost software）</strong>，是从竞争与市场需求发展的角度说的。云计算降低了人们使用IT的门槛，不仅仅在个人技术能力上，而且在资金能力上，很多小微的初创企业，本身就没啥钱，希望能够用最少的钱使用最多的IT服务，要想打开这部分市场，自然需要低成本的软件，通过薄利多销的形式赚到更多的钱。</p><p><strong>地理分布（Geographic distribution）</strong>：前文我们提到了泛在接入，也就是能够在任意时间任意地点提供IT服务。从使用者的角度看，就是地理分散的，由于各地网络带宽的优劣差异，那么IT提供者，也就是云计算数据中心的部署，自然也是呈现出地理分布式特征的。大的公有云厂商都有几十个甚至数百个数据中心或服务节点，面向全球提供云计算服务。</p><p><strong>服务定位（Service orientation）</strong>：因为云计算是一种服务模式，它的整个体系的设计也就是面向服务的。</p><p><strong>先进安全技术（Advanced security technologies）</strong>，林子大了，什么鸟都有，公有云大了，什么用户也都有，包括好的坏的，自然先进的安全技术保障是一个云计算必须的条件了。</p><p>到此为止，对云计算的总结就是：4部署-3服务-5特性-8个通用点，简称<strong>4358</strong>。<br><img src="https://i.loli.net/2019/02/18/5c6a69805e25b.jpg" alt></p><h2 id="云计算的流派"><a href="#云计算的流派" class="headerlink" title="云计算的流派"></a>云计算的流派</h2><blockquote><p>从实现方式来看，云计算有两个典型的流派：<strong>大分小模式</strong>和<strong>小聚大模式</strong>。（现在这个概念已经很少有人提了，因为从资源的使用看，两种流派的本质是相同的）</p></blockquote><p><img src="https://i.loli.net/2019/02/18/5c6a69dc3017e.jpg" alt></p><p><strong>大分小模式</strong>：也称为Amazon流派，不同的应用在使用资源时，通过时分复用算法来调用。</p><blockquote><p>关键技术点包括：计算、存储和网络虚拟化以及虚拟机监控、调度和迁移。</p></blockquote><blockquote><p>典型代表：Amazon，alibaba，华为的EC2等。</p></blockquote><p><strong>小聚大模式</strong>：也称为Google流派，资源在多个应用间贡献，通过将应用划分多个子任务，结合调度算法来实现某个子引用在资源上的独占。</p><blockquote><p>关键技术点包括任务分解、调度、分布式通信总线和全局一致性。</p></blockquote><blockquote><p>典型代表：Google，我国的天河2号等</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;云计算的发展历程&quot;&gt;&lt;a href=&quot;#云计算的发展历程&quot; class=&quot;headerlink&quot; title=&quot;云计算的发展历程&quot;&gt;&lt;/a&gt;云计算的发展历程&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;云计算的历史也是蛮好玩的…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一开始就是在2003年之前，大家都在在提升CPU的计算能力，提升存储的空间，使得CPU性能越来越高、存储变得更大。
    
    </summary>
    
      <category term="云计算" scheme="https://kkutysllb.cn/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    
      <category term="基础概念" scheme="https://kkutysllb.cn/tags/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>2018-09-03-什么是云计算?</title>
    <link href="https://kkutysllb.cn/2018/09/03/2018-09-03-%E4%BB%80%E4%B9%88%E6%98%AF%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    <id>https://kkutysllb.cn/2018/09/03/2018-09-03-什么是云计算/</id>
    <published>2018-09-02T18:25:25.000Z</published>
    <updated>2019-02-18T00:49:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="云计算概念的定义"><a href="#云计算概念的定义" class="headerlink" title="云计算概念的定义"></a>云计算概念的定义</h2><blockquote><p>云计算基础知识入门</p></blockquote><p>云计算是一种按使用量付费的模式，这种模式提供可用的、便捷的、按需的网络服务（即随时随地接入可接入），进入可配置的计算资源共享池（包括：网络、服务器、存储、应用软件、服务），这些资源能够被快速提供，只需投入很少的管理工作，或与服务供应商进行很少的交互。（美国国家标准与技术研究院）</p><p>云计算是一种基于互联网的计算方式，通过这种方式，共享软硬件资源和信息可以按需求提供给计算机和其他设备。云计算依赖资源的共享以达成规模经济，类似基础设施。（维基百科）<a id="more"></a></p><p>云计算概念诞生之初，市场上对其概念有很多种理解，经过一段时间的争论，现在大家一般来说都认可的就是美国标准与技术研究院的它给出的一个最标准的定义。它把云计算定义为一种模式，而不是一种技术。这种模式既可以是商业模式，也可以是服务模式。</p><h2 id="云计算的关键特征"><a href="#云计算的关键特征" class="headerlink" title="云计算的关键特征"></a>云计算的关键特征</h2><blockquote><p>按需自助服务（On-demand Self-service）</p></blockquote><blockquote><p>无处不在的网络接入（Broad Network Access）</p></blockquote><blockquote><p>与位置无关的资源池（Locations independent resources pooling）</p></blockquote><blockquote><p>快速弹性（Rapid Elastic）</p></blockquote><blockquote><p>按使用付费（Pay per User）</p></blockquote><p>我们从云计算的基本特质上进一步理解一下云计算的<strong>概念</strong>和<strong>内涵</strong>。</p><ul><li>从管理层面上说，云计算实现了IT资源的按需自助服务。“按需”是从量的角度来说，这是一种“量体裁衣”的资源使用方式，避免粗放管理带来成本损耗。“自助”是从人的角度来说，减少了资源使用者与资源管理者之间的频繁交互，进一步减少人工成本的损耗。同时，从历史上看，IT的使用难度每降低一个层次，IT产业就会获得一次质飞跃，因为客户数量会因此有指数级的提升。而“自助”这种简单化操作意味着更多的人都可以使用IT产品和服务。</li><li>云计算实现了广泛网络接入。这意味着用户可以在全球各地7x24小时的使用IT服务，也就是随时、随地、随心、随意的使用。这极大的提升了用户工作的灵活性和经营工作效率。</li><li>云计算实现了资源池化。“池化”就意味着资源的同质化、归一化。无论是网络、服务器、存储、应用还是服务，都是这些同质化、归一化资源的组合、协同实现。使用者和管理者只需考虑需求的资源“量”，无需考虑资源提供商之间的差异性。</li><li>云计算资源弹性伸缩。是指资源能够快速的供应和释放，就是说当你要的时候，我能快速的很快就给你，不是说你申请了以后，十天半个月我才给你资源，而是你要我马上就给你，当你不用的时候，我马上就回收，资源释放。</li><li>从经营层面上说，云计算实现了可计量的服务。“技术免费、服务收费”是开源社区的一个宗旨。前面也提到云计算的本质就是一种服务，为了实现这类服务收费，就必须要求服务可计量，而计量的依据就是资源使用的可计量。比如：按使用小时为时间单位，以服务器CPU个数、占用存储的空间、网络的带宽等综合计费，当然也可以包时、包天、包月那种套餐模式进行计量。而且，计量的越精细，运营效率越高。</li></ul><p>以上，就是美国标准与技术研究院给云计算标准的定义时所诠释的特质。</p><p>从技术视角来看：云计算=计算/存储的网络<br><img src="https://i.loli.net/2019/02/15/5c65b42eab5ed.jpg" alt="云计算技术视角"></p><p>商业视角：云计算=信息电厂<br><strong>计算和存储：</strong>由PC时代的局域网向云时代的互联网迁移。<br><strong>软件：</strong>由PC时代的终端向云端迁移。<br><img src="https://i.loli.net/2019/02/15/5c65d713ea4c2.jpg" alt="云计算商业视角"></p><p><strong>用户消费模式变化</strong></p><ul><li><p>通过互联网提供软硬件与服务；</p></li><li><p>用户通过浏览器或轻量级终端获取、使用服务。</p></li></ul><p><strong>商业模式发生变化</strong></p><ul><li>从“购买软硬件产品”向“购买信息服务”转变，如同100年前用电的转变。</li></ul><h2 id="云计算产生的背景"><a href="#云计算产生的背景" class="headerlink" title="云计算产生的背景"></a>云计算产生的背景</h2><blockquote><p>云计算=需求推动+技术进步+商业模式转变</p></blockquote><p><img src="https://i.loli.net/2019/02/15/5c65d7cbc65b6.jpg" alt><br>云计算的产生是需求推动、技术进步、商业模式转变共同促进的结果。</p><p><strong>需求推动：</strong></p><ul><li><p>政企客户低成本且高性能的信息化需求。</p></li><li><p>个人用户的互联网、移动互联网应用需求强烈，追求更好用户体验。</p></li></ul><p><strong>技术进步</strong></p><ul><li><p>虚拟化技术、分布与并行计算、互联网技术的发展与成熟，使得基于互联网提供包括IT基础设施、开发平台、软件应用成为可能。</p></li><li><p>宽带技术及用户发展，使得基于互联网的服务使用模式逐渐成为主流。</p></li></ul><p><strong>商业模式转变</strong></p><ul><li><p>少数云计算的先行者（例如Amazon的IaaS、PaaS)的云计算服务已开始运营。</p></li><li><p>市场对云计算商业模式已认可，越来越多的用户接受并使用云计算服务。</p></li><li><p>生态系统正在形成，产业链开始发展和整合。</p></li></ul><p>几年之内，云计算已从新兴技术发展成为当今的热点技术。从Google公开发布的核心文件到Amazon EC2（亚马逊弹性计算云）的商业化应用，再到美国电信巨头AT&amp;T（美国电话电报公司）推出的Synaptic Hosting（动态托管）服务，云计算从节约成本的工具到盈利的推动器，从ISP（网络服务提供商）到电信企业，已然成功地从内置的IT系统演变成公共的服务。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;云计算概念的定义&quot;&gt;&lt;a href=&quot;#云计算概念的定义&quot; class=&quot;headerlink&quot; title=&quot;云计算概念的定义&quot;&gt;&lt;/a&gt;云计算概念的定义&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;云计算基础知识入门&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;云计算是一种按使用量付费的模式，这种模式提供可用的、便捷的、按需的网络服务（即随时随地接入可接入），进入可配置的计算资源共享池（包括：网络、服务器、存储、应用软件、服务），这些资源能够被快速提供，只需投入很少的管理工作，或与服务供应商进行很少的交互。（美国国家标准与技术研究院）&lt;/p&gt;
&lt;p&gt;云计算是一种基于互联网的计算方式，通过这种方式，共享软硬件资源和信息可以按需求提供给计算机和其他设备。云计算依赖资源的共享以达成规模经济，类似基础设施。（维基百科）
    
    </summary>
    
      <category term="云计算" scheme="https://kkutysllb.cn/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    
      <category term="基本概念" scheme="https://kkutysllb.cn/tags/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>2018-08-31-为什么开始写博客？</title>
    <link href="https://kkutysllb.cn/2018/08/31/2018-08-31-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BC%80%E5%A7%8B%E5%86%99%E5%8D%9A%E5%AE%A2%EF%BC%9F/"/>
    <id>https://kkutysllb.cn/2018/08/31/2018-08-31-为什么开始写博客？/</id>
    <published>2018-08-31T11:36:28.000Z</published>
    <updated>2019-02-18T00:49:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2018年3月—7月期间，有幸在外培训，时间相对宽松。当时，主要一直在自学SDN部分知识，鉴于同班同学一直询问询问云计算怎么学习？为此，我特意开通微信公众号，主要讲述一点儿OpenStack的基础知识。（如下）<a id="more"></a></p><p><img src="https://i.loli.net/2019/02/15/5c66ab29282da.jpg" alt></p><p>当时，还特意列出一个大纲，从最基础的Linux开始，一直到后续高级服务和应用。比如：Tacker、Workflow、批量热迁移等。</p><p>但是，微信公众号的排版实在是太浪费时间，再加上后续回到工作岗位，个人时间实在有限，因此公众号的内容一直处在长期停更，偶尔写写的状态。实在有愧大家的期待-_-!!!<br><img src="https://i.loli.net/2019/02/15/5c66abfd17423.jpg" alt></p><p>在2018年7月期间，一个偶然的机会让我接触到hexo和markdown两个小伙伴，让我燃起了写技术博客的动力。hexo主要用来生成静态页面，而markdown是一种极简的文本编写工具，其语法格式只有十来种，对编写网页博客有很大助力：-）利用这两个工具，可以提升网文的写作效率。至于怎么使用，网上的教程很多，大家可以自信搜索。</p><p>言归正传，后续公众号中已完成的内容我会逐渐搬到个人博客中来，并对前期挖的坑做个填补-_-!!!。新增的内容主要在个人博客中完成，微信公众号只能有空闲时间后，再进行补充，还请大家以后多关注博客内容。<br><img src="https://i.loli.net/2019/02/15/5c66abb56e42b.jpg" alt></p><p>另外，大家有什么疑惑，以后都可以在博客的留言区进行留言。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;2018年3月—7月期间，有幸在外培训，时间相对宽松。当时，主要一直在自学SDN部分知识，鉴于同班同学一直询问询问云计算怎么学习？为此，我特意开通微信公众号，主要讲述一点儿OpenStack的基础知识。（如下）
    
    </summary>
    
      <category term="随笔杂感" scheme="https://kkutysllb.cn/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E6%84%9F/"/>
    
    
      <category term="篇首语" scheme="https://kkutysllb.cn/tags/%E7%AF%87%E9%A6%96%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>2018-08-31-写在前面的话</title>
    <link href="https://kkutysllb.cn/2018/08/31/2018-08-31-%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2%E7%9A%84%E8%AF%9D/"/>
    <id>https://kkutysllb.cn/2018/08/31/2018-08-31-写在前面的话/</id>
    <published>2018-08-30T18:23:41.000Z</published>
    <updated>2019-02-18T00:49:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学习大纲</p></blockquote><p>鉴于好多人询问云计算怎么学习？我的建议是实践和理论相结合！IT不像CT那么多理论和流程，IT诞生和发展的源动力就是提升工作效率。因此，IT的理论并没有CT那么难，但是要想用好，用巧必须具备相当丰富的实操经验。对于新手，最好的学习方式就是边实践边消化相关理论流程。<a id="more"></a><br><img src="https://i.loli.net/2019/02/15/5c66ad06d409f.jpg" alt></p><p>OpenStack是目前最成熟并且符合生产部署的一套开源云操作系统，全球各大IT，CT厂商，甚至运营商都为此投入了大量的人力、物力和精力。由于其开源的特性，全世界的云计算爱好者也为此贡献了很多。从openstack的特点来看，它是由python语音开发，是一个提供多种服务，相当灵活和稳定的云操作系统。以前的定义主要集中IaaS层（基础设施层），但是现在随着docker的出现，IaaS和PaaS（平台层）的界限已经非常模糊，同时随着K8s的兴起，甚至与SaaS的界限也不再清晰。从操作系统的组成来看，openstack+docker+k8s的组合更像一个更广泛的云化操作系统，openstack是内核，dokcer是用户空间，K8s是调用各项基础进程的API。</p><p>转入正题，由于openstack非常灵活，同时也就引入另一个问题，学习起来非常困难。因此，在学习openstack的同时，如果自己手头有一套实验环境那是相当的完美。我当初学习openstack是从devstack开始学起（openstack开发者版本），同时我也建议初学者从devstack开始学起。接下来我们就开始学习OpenStack的第一步，基础准备工作。</p><h2 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h2><blockquote><p>学习云计算的硬件和软件条件</p></blockquote><p>1、一台不少于16G内存，2CPU+内核笔记本或二手服务器，且硬件要开启支持虚拟化功能。BIOS中的开启方法如下图所示：<br><img src="https://i.loli.net/2019/02/15/5c66ad4779667.jpg" alt></p><p>2、下载CentOS 7的光盘安装镜像。下载地址在CentOS官网链接，下载DVD版本即可。<a href="https://www.centos.org/download/" target="_blank" rel="noopener">https://www.centos.org/download/</a><br><img src="https://i.loli.net/2019/02/15/5c66ad8ee916c.jpg" alt></p><p>3、去VMWare官网下载VMWare虚拟机软件，需要新注册个账号。下载链接如下：（注意：如果你你的宿主机是win10系统，不要下载VirtualBox，因为win10的无线网络在VirtualBox中设置桥接网络有BUG）<a href="https://www.vmware.com/cn/support/workstation.html" target="_blank" rel="noopener">https://www.vmware.com/cn/support/workstation.html</a><br><img src="https://i.loli.net/2019/02/15/5c66adbf75048.jpg" alt></p><p>以上工具就是我们环境搭建需要的基本工具。还有一些辅助工具如：XShell、XFTP可自行百度下载（个人版在官网申请是免费，记得千万不要升级）</p><p>下载地址如下：</p><p><a href="http://www.netsarang.com/products/xsh_overview.html" target="_blank" rel="noopener">http://www.netsarang.com/products/xsh_overview.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学习大纲&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;鉴于好多人询问云计算怎么学习？我的建议是实践和理论相结合！IT不像CT那么多理论和流程，IT诞生和发展的源动力就是提升工作效率。因此，IT的理论并没有CT那么难，但是要想用好，用巧必须具备相当丰富的实操经验。对于新手，最好的学习方式就是边实践边消化相关理论流程。
    
    </summary>
    
      <category term="云计算" scheme="https://kkutysllb.cn/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    
      <category term="OpenStack" scheme="https://kkutysllb.cn/tags/OpenStack/"/>
    
      <category term="基础准备" scheme="https://kkutysllb.cn/tags/%E5%9F%BA%E7%A1%80%E5%87%86%E5%A4%87/"/>
    
  </entry>
  
</feed>
